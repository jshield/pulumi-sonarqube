// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sonarqube

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type QualityGateProjectAssociation struct {
	pulumi.CustomResourceState

	Gateid     pulumi.StringPtrOutput `pulumi:"gateid"`
	Gatename   pulumi.StringPtrOutput `pulumi:"gatename"`
	Projectkey pulumi.StringOutput    `pulumi:"projectkey"`
}

// NewQualityGateProjectAssociation registers a new resource with the given unique name, arguments, and options.
func NewQualityGateProjectAssociation(ctx *pulumi.Context,
	name string, args *QualityGateProjectAssociationArgs, opts ...pulumi.ResourceOption) (*QualityGateProjectAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Projectkey == nil {
		return nil, errors.New("invalid value for required argument 'Projectkey'")
	}
	var resource QualityGateProjectAssociation
	err := ctx.RegisterResource("sonarqube:index/qualityGateProjectAssociation:QualityGateProjectAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQualityGateProjectAssociation gets an existing QualityGateProjectAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQualityGateProjectAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QualityGateProjectAssociationState, opts ...pulumi.ResourceOption) (*QualityGateProjectAssociation, error) {
	var resource QualityGateProjectAssociation
	err := ctx.ReadResource("sonarqube:index/qualityGateProjectAssociation:QualityGateProjectAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QualityGateProjectAssociation resources.
type qualityGateProjectAssociationState struct {
	Gateid     *string `pulumi:"gateid"`
	Gatename   *string `pulumi:"gatename"`
	Projectkey *string `pulumi:"projectkey"`
}

type QualityGateProjectAssociationState struct {
	Gateid     pulumi.StringPtrInput
	Gatename   pulumi.StringPtrInput
	Projectkey pulumi.StringPtrInput
}

func (QualityGateProjectAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*qualityGateProjectAssociationState)(nil)).Elem()
}

type qualityGateProjectAssociationArgs struct {
	Gateid     *string `pulumi:"gateid"`
	Gatename   *string `pulumi:"gatename"`
	Projectkey string  `pulumi:"projectkey"`
}

// The set of arguments for constructing a QualityGateProjectAssociation resource.
type QualityGateProjectAssociationArgs struct {
	Gateid     pulumi.StringPtrInput
	Gatename   pulumi.StringPtrInput
	Projectkey pulumi.StringInput
}

func (QualityGateProjectAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*qualityGateProjectAssociationArgs)(nil)).Elem()
}

type QualityGateProjectAssociationInput interface {
	pulumi.Input

	ToQualityGateProjectAssociationOutput() QualityGateProjectAssociationOutput
	ToQualityGateProjectAssociationOutputWithContext(ctx context.Context) QualityGateProjectAssociationOutput
}

func (*QualityGateProjectAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**QualityGateProjectAssociation)(nil)).Elem()
}

func (i *QualityGateProjectAssociation) ToQualityGateProjectAssociationOutput() QualityGateProjectAssociationOutput {
	return i.ToQualityGateProjectAssociationOutputWithContext(context.Background())
}

func (i *QualityGateProjectAssociation) ToQualityGateProjectAssociationOutputWithContext(ctx context.Context) QualityGateProjectAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QualityGateProjectAssociationOutput)
}

// QualityGateProjectAssociationArrayInput is an input type that accepts QualityGateProjectAssociationArray and QualityGateProjectAssociationArrayOutput values.
// You can construct a concrete instance of `QualityGateProjectAssociationArrayInput` via:
//
//          QualityGateProjectAssociationArray{ QualityGateProjectAssociationArgs{...} }
type QualityGateProjectAssociationArrayInput interface {
	pulumi.Input

	ToQualityGateProjectAssociationArrayOutput() QualityGateProjectAssociationArrayOutput
	ToQualityGateProjectAssociationArrayOutputWithContext(context.Context) QualityGateProjectAssociationArrayOutput
}

type QualityGateProjectAssociationArray []QualityGateProjectAssociationInput

func (QualityGateProjectAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QualityGateProjectAssociation)(nil)).Elem()
}

func (i QualityGateProjectAssociationArray) ToQualityGateProjectAssociationArrayOutput() QualityGateProjectAssociationArrayOutput {
	return i.ToQualityGateProjectAssociationArrayOutputWithContext(context.Background())
}

func (i QualityGateProjectAssociationArray) ToQualityGateProjectAssociationArrayOutputWithContext(ctx context.Context) QualityGateProjectAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QualityGateProjectAssociationArrayOutput)
}

// QualityGateProjectAssociationMapInput is an input type that accepts QualityGateProjectAssociationMap and QualityGateProjectAssociationMapOutput values.
// You can construct a concrete instance of `QualityGateProjectAssociationMapInput` via:
//
//          QualityGateProjectAssociationMap{ "key": QualityGateProjectAssociationArgs{...} }
type QualityGateProjectAssociationMapInput interface {
	pulumi.Input

	ToQualityGateProjectAssociationMapOutput() QualityGateProjectAssociationMapOutput
	ToQualityGateProjectAssociationMapOutputWithContext(context.Context) QualityGateProjectAssociationMapOutput
}

type QualityGateProjectAssociationMap map[string]QualityGateProjectAssociationInput

func (QualityGateProjectAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QualityGateProjectAssociation)(nil)).Elem()
}

func (i QualityGateProjectAssociationMap) ToQualityGateProjectAssociationMapOutput() QualityGateProjectAssociationMapOutput {
	return i.ToQualityGateProjectAssociationMapOutputWithContext(context.Background())
}

func (i QualityGateProjectAssociationMap) ToQualityGateProjectAssociationMapOutputWithContext(ctx context.Context) QualityGateProjectAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QualityGateProjectAssociationMapOutput)
}

type QualityGateProjectAssociationOutput struct{ *pulumi.OutputState }

func (QualityGateProjectAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QualityGateProjectAssociation)(nil)).Elem()
}

func (o QualityGateProjectAssociationOutput) ToQualityGateProjectAssociationOutput() QualityGateProjectAssociationOutput {
	return o
}

func (o QualityGateProjectAssociationOutput) ToQualityGateProjectAssociationOutputWithContext(ctx context.Context) QualityGateProjectAssociationOutput {
	return o
}

type QualityGateProjectAssociationArrayOutput struct{ *pulumi.OutputState }

func (QualityGateProjectAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QualityGateProjectAssociation)(nil)).Elem()
}

func (o QualityGateProjectAssociationArrayOutput) ToQualityGateProjectAssociationArrayOutput() QualityGateProjectAssociationArrayOutput {
	return o
}

func (o QualityGateProjectAssociationArrayOutput) ToQualityGateProjectAssociationArrayOutputWithContext(ctx context.Context) QualityGateProjectAssociationArrayOutput {
	return o
}

func (o QualityGateProjectAssociationArrayOutput) Index(i pulumi.IntInput) QualityGateProjectAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QualityGateProjectAssociation {
		return vs[0].([]*QualityGateProjectAssociation)[vs[1].(int)]
	}).(QualityGateProjectAssociationOutput)
}

type QualityGateProjectAssociationMapOutput struct{ *pulumi.OutputState }

func (QualityGateProjectAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QualityGateProjectAssociation)(nil)).Elem()
}

func (o QualityGateProjectAssociationMapOutput) ToQualityGateProjectAssociationMapOutput() QualityGateProjectAssociationMapOutput {
	return o
}

func (o QualityGateProjectAssociationMapOutput) ToQualityGateProjectAssociationMapOutputWithContext(ctx context.Context) QualityGateProjectAssociationMapOutput {
	return o
}

func (o QualityGateProjectAssociationMapOutput) MapIndex(k pulumi.StringInput) QualityGateProjectAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QualityGateProjectAssociation {
		return vs[0].(map[string]*QualityGateProjectAssociation)[vs[1].(string)]
	}).(QualityGateProjectAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QualityGateProjectAssociationInput)(nil)).Elem(), &QualityGateProjectAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*QualityGateProjectAssociationArrayInput)(nil)).Elem(), QualityGateProjectAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QualityGateProjectAssociationMapInput)(nil)).Elem(), QualityGateProjectAssociationMap{})
	pulumi.RegisterOutputType(QualityGateProjectAssociationOutput{})
	pulumi.RegisterOutputType(QualityGateProjectAssociationArrayOutput{})
	pulumi.RegisterOutputType(QualityGateProjectAssociationMapOutput{})
}
