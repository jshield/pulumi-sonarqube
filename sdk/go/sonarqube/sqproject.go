// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sonarqube

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SQProject struct {
	pulumi.CustomResourceState

	Name       pulumi.StringOutput    `pulumi:"name"`
	Project    pulumi.StringOutput    `pulumi:"project"`
	Visibility pulumi.StringPtrOutput `pulumi:"visibility"`
}

// NewSQProject registers a new resource with the given unique name, arguments, and options.
func NewSQProject(ctx *pulumi.Context,
	name string, args *SQProjectArgs, opts ...pulumi.ResourceOption) (*SQProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	var resource SQProject
	err := ctx.RegisterResource("sonarqube:index/sQProject:SQProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSQProject gets an existing SQProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSQProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SQProjectState, opts ...pulumi.ResourceOption) (*SQProject, error) {
	var resource SQProject
	err := ctx.ReadResource("sonarqube:index/sQProject:SQProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SQProject resources.
type sqprojectState struct {
	Name       *string `pulumi:"name"`
	Project    *string `pulumi:"project"`
	Visibility *string `pulumi:"visibility"`
}

type SQProjectState struct {
	Name       pulumi.StringPtrInput
	Project    pulumi.StringPtrInput
	Visibility pulumi.StringPtrInput
}

func (SQProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqprojectState)(nil)).Elem()
}

type sqprojectArgs struct {
	Name       *string `pulumi:"name"`
	Project    string  `pulumi:"project"`
	Visibility *string `pulumi:"visibility"`
}

// The set of arguments for constructing a SQProject resource.
type SQProjectArgs struct {
	Name       pulumi.StringPtrInput
	Project    pulumi.StringInput
	Visibility pulumi.StringPtrInput
}

func (SQProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqprojectArgs)(nil)).Elem()
}

type SQProjectInput interface {
	pulumi.Input

	ToSQProjectOutput() SQProjectOutput
	ToSQProjectOutputWithContext(ctx context.Context) SQProjectOutput
}

func (*SQProject) ElementType() reflect.Type {
	return reflect.TypeOf((**SQProject)(nil)).Elem()
}

func (i *SQProject) ToSQProjectOutput() SQProjectOutput {
	return i.ToSQProjectOutputWithContext(context.Background())
}

func (i *SQProject) ToSQProjectOutputWithContext(ctx context.Context) SQProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SQProjectOutput)
}

// SQProjectArrayInput is an input type that accepts SQProjectArray and SQProjectArrayOutput values.
// You can construct a concrete instance of `SQProjectArrayInput` via:
//
//          SQProjectArray{ SQProjectArgs{...} }
type SQProjectArrayInput interface {
	pulumi.Input

	ToSQProjectArrayOutput() SQProjectArrayOutput
	ToSQProjectArrayOutputWithContext(context.Context) SQProjectArrayOutput
}

type SQProjectArray []SQProjectInput

func (SQProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SQProject)(nil)).Elem()
}

func (i SQProjectArray) ToSQProjectArrayOutput() SQProjectArrayOutput {
	return i.ToSQProjectArrayOutputWithContext(context.Background())
}

func (i SQProjectArray) ToSQProjectArrayOutputWithContext(ctx context.Context) SQProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SQProjectArrayOutput)
}

// SQProjectMapInput is an input type that accepts SQProjectMap and SQProjectMapOutput values.
// You can construct a concrete instance of `SQProjectMapInput` via:
//
//          SQProjectMap{ "key": SQProjectArgs{...} }
type SQProjectMapInput interface {
	pulumi.Input

	ToSQProjectMapOutput() SQProjectMapOutput
	ToSQProjectMapOutputWithContext(context.Context) SQProjectMapOutput
}

type SQProjectMap map[string]SQProjectInput

func (SQProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SQProject)(nil)).Elem()
}

func (i SQProjectMap) ToSQProjectMapOutput() SQProjectMapOutput {
	return i.ToSQProjectMapOutputWithContext(context.Background())
}

func (i SQProjectMap) ToSQProjectMapOutputWithContext(ctx context.Context) SQProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SQProjectMapOutput)
}

type SQProjectOutput struct{ *pulumi.OutputState }

func (SQProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SQProject)(nil)).Elem()
}

func (o SQProjectOutput) ToSQProjectOutput() SQProjectOutput {
	return o
}

func (o SQProjectOutput) ToSQProjectOutputWithContext(ctx context.Context) SQProjectOutput {
	return o
}

type SQProjectArrayOutput struct{ *pulumi.OutputState }

func (SQProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SQProject)(nil)).Elem()
}

func (o SQProjectArrayOutput) ToSQProjectArrayOutput() SQProjectArrayOutput {
	return o
}

func (o SQProjectArrayOutput) ToSQProjectArrayOutputWithContext(ctx context.Context) SQProjectArrayOutput {
	return o
}

func (o SQProjectArrayOutput) Index(i pulumi.IntInput) SQProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SQProject {
		return vs[0].([]*SQProject)[vs[1].(int)]
	}).(SQProjectOutput)
}

type SQProjectMapOutput struct{ *pulumi.OutputState }

func (SQProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SQProject)(nil)).Elem()
}

func (o SQProjectMapOutput) ToSQProjectMapOutput() SQProjectMapOutput {
	return o
}

func (o SQProjectMapOutput) ToSQProjectMapOutputWithContext(ctx context.Context) SQProjectMapOutput {
	return o
}

func (o SQProjectMapOutput) MapIndex(k pulumi.StringInput) SQProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SQProject {
		return vs[0].(map[string]*SQProject)[vs[1].(string)]
	}).(SQProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SQProjectInput)(nil)).Elem(), &SQProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*SQProjectArrayInput)(nil)).Elem(), SQProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SQProjectMapInput)(nil)).Elem(), SQProjectMap{})
	pulumi.RegisterOutputType(SQProjectOutput{})
	pulumi.RegisterOutputType(SQProjectArrayOutput{})
	pulumi.RegisterOutputType(SQProjectMapOutput{})
}
