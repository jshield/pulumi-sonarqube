// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sonarqube

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "sonarqube:index/group:Group":
		r = &Group{}
	case "sonarqube:index/permission:Permission":
		r = &Permission{}
	case "sonarqube:index/permissionTemplate:PermissionTemplate":
		r = &PermissionTemplate{}
	case "sonarqube:index/plugin:Plugin":
		r = &Plugin{}
	case "sonarqube:index/qualityGate:QualityGate":
		r = &QualityGate{}
	case "sonarqube:index/qualityGateCondition:QualityGateCondition":
		r = &QualityGateCondition{}
	case "sonarqube:index/qualityGateProjectAssociation:QualityGateProjectAssociation":
		r = &QualityGateProjectAssociation{}
	case "sonarqube:index/qualityProfile:QualityProfile":
		r = &QualityProfile{}
	case "sonarqube:index/qualityProfileActivateRule:QualityProfileActivateRule":
		r = &QualityProfileActivateRule{}
	case "sonarqube:index/qualityProfileProjectAssociation:QualityProfileProjectAssociation":
		r = &QualityProfileProjectAssociation{}
	case "sonarqube:index/rule:Rule":
		r = &Rule{}
	case "sonarqube:index/sQProject:SQProject":
		r = &SQProject{}
	case "sonarqube:index/setting:Setting":
		r = &Setting{}
	case "sonarqube:index/user:User":
		r = &User{}
	case "sonarqube:index/userToken:UserToken":
		r = &UserToken{}
	case "sonarqube:index/webHook:WebHook":
		r = &WebHook{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:sonarqube" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Printf("failed to determine package version. defaulting to v1: %v\n", err)
	}
	pulumi.RegisterResourceModule(
		"sonarqube",
		"index/group",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sonarqube",
		"index/permission",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sonarqube",
		"index/permissionTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sonarqube",
		"index/plugin",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sonarqube",
		"index/qualityGate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sonarqube",
		"index/qualityGateCondition",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sonarqube",
		"index/qualityGateProjectAssociation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sonarqube",
		"index/qualityProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sonarqube",
		"index/qualityProfileActivateRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sonarqube",
		"index/qualityProfileProjectAssociation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sonarqube",
		"index/rule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sonarqube",
		"index/sQProject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sonarqube",
		"index/setting",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sonarqube",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sonarqube",
		"index/userToken",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sonarqube",
		"index/webHook",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"sonarqube",
		&pkg{version},
	)
}
