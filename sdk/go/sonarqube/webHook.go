// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sonarqube

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WebHook struct {
	pulumi.CustomResourceState

	Name   pulumi.StringOutput `pulumi:"name"`
	Secret pulumi.StringOutput `pulumi:"secret"`
	Url    pulumi.StringOutput `pulumi:"url"`
}

// NewWebHook registers a new resource with the given unique name, arguments, and options.
func NewWebHook(ctx *pulumi.Context,
	name string, args *WebHookArgs, opts ...pulumi.ResourceOption) (*WebHook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource WebHook
	err := ctx.RegisterResource("sonarqube:index/webHook:WebHook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebHook gets an existing WebHook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebHookState, opts ...pulumi.ResourceOption) (*WebHook, error) {
	var resource WebHook
	err := ctx.ReadResource("sonarqube:index/webHook:WebHook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebHook resources.
type webHookState struct {
	Name   *string `pulumi:"name"`
	Secret *string `pulumi:"secret"`
	Url    *string `pulumi:"url"`
}

type WebHookState struct {
	Name   pulumi.StringPtrInput
	Secret pulumi.StringPtrInput
	Url    pulumi.StringPtrInput
}

func (WebHookState) ElementType() reflect.Type {
	return reflect.TypeOf((*webHookState)(nil)).Elem()
}

type webHookArgs struct {
	Name   *string `pulumi:"name"`
	Secret *string `pulumi:"secret"`
	Url    string  `pulumi:"url"`
}

// The set of arguments for constructing a WebHook resource.
type WebHookArgs struct {
	Name   pulumi.StringPtrInput
	Secret pulumi.StringPtrInput
	Url    pulumi.StringInput
}

func (WebHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webHookArgs)(nil)).Elem()
}

type WebHookInput interface {
	pulumi.Input

	ToWebHookOutput() WebHookOutput
	ToWebHookOutputWithContext(ctx context.Context) WebHookOutput
}

func (*WebHook) ElementType() reflect.Type {
	return reflect.TypeOf((**WebHook)(nil)).Elem()
}

func (i *WebHook) ToWebHookOutput() WebHookOutput {
	return i.ToWebHookOutputWithContext(context.Background())
}

func (i *WebHook) ToWebHookOutputWithContext(ctx context.Context) WebHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHookOutput)
}

// WebHookArrayInput is an input type that accepts WebHookArray and WebHookArrayOutput values.
// You can construct a concrete instance of `WebHookArrayInput` via:
//
//          WebHookArray{ WebHookArgs{...} }
type WebHookArrayInput interface {
	pulumi.Input

	ToWebHookArrayOutput() WebHookArrayOutput
	ToWebHookArrayOutputWithContext(context.Context) WebHookArrayOutput
}

type WebHookArray []WebHookInput

func (WebHookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebHook)(nil)).Elem()
}

func (i WebHookArray) ToWebHookArrayOutput() WebHookArrayOutput {
	return i.ToWebHookArrayOutputWithContext(context.Background())
}

func (i WebHookArray) ToWebHookArrayOutputWithContext(ctx context.Context) WebHookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHookArrayOutput)
}

// WebHookMapInput is an input type that accepts WebHookMap and WebHookMapOutput values.
// You can construct a concrete instance of `WebHookMapInput` via:
//
//          WebHookMap{ "key": WebHookArgs{...} }
type WebHookMapInput interface {
	pulumi.Input

	ToWebHookMapOutput() WebHookMapOutput
	ToWebHookMapOutputWithContext(context.Context) WebHookMapOutput
}

type WebHookMap map[string]WebHookInput

func (WebHookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebHook)(nil)).Elem()
}

func (i WebHookMap) ToWebHookMapOutput() WebHookMapOutput {
	return i.ToWebHookMapOutputWithContext(context.Background())
}

func (i WebHookMap) ToWebHookMapOutputWithContext(ctx context.Context) WebHookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHookMapOutput)
}

type WebHookOutput struct{ *pulumi.OutputState }

func (WebHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebHook)(nil)).Elem()
}

func (o WebHookOutput) ToWebHookOutput() WebHookOutput {
	return o
}

func (o WebHookOutput) ToWebHookOutputWithContext(ctx context.Context) WebHookOutput {
	return o
}

type WebHookArrayOutput struct{ *pulumi.OutputState }

func (WebHookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebHook)(nil)).Elem()
}

func (o WebHookArrayOutput) ToWebHookArrayOutput() WebHookArrayOutput {
	return o
}

func (o WebHookArrayOutput) ToWebHookArrayOutputWithContext(ctx context.Context) WebHookArrayOutput {
	return o
}

func (o WebHookArrayOutput) Index(i pulumi.IntInput) WebHookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebHook {
		return vs[0].([]*WebHook)[vs[1].(int)]
	}).(WebHookOutput)
}

type WebHookMapOutput struct{ *pulumi.OutputState }

func (WebHookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebHook)(nil)).Elem()
}

func (o WebHookMapOutput) ToWebHookMapOutput() WebHookMapOutput {
	return o
}

func (o WebHookMapOutput) ToWebHookMapOutputWithContext(ctx context.Context) WebHookMapOutput {
	return o
}

func (o WebHookMapOutput) MapIndex(k pulumi.StringInput) WebHookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebHook {
		return vs[0].(map[string]*WebHook)[vs[1].(string)]
	}).(WebHookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebHookInput)(nil)).Elem(), &WebHook{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebHookArrayInput)(nil)).Elem(), WebHookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebHookMapInput)(nil)).Elem(), WebHookMap{})
	pulumi.RegisterOutputType(WebHookOutput{})
	pulumi.RegisterOutputType(WebHookArrayOutput{})
	pulumi.RegisterOutputType(WebHookMapOutput{})
}
