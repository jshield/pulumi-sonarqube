// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sonarqube

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PermissionTemplate struct {
	pulumi.CustomResourceState

	Description       pulumi.StringPtrOutput `pulumi:"description"`
	Name              pulumi.StringOutput    `pulumi:"name"`
	ProjectKeyPattern pulumi.StringPtrOutput `pulumi:"projectKeyPattern"`
}

// NewPermissionTemplate registers a new resource with the given unique name, arguments, and options.
func NewPermissionTemplate(ctx *pulumi.Context,
	name string, args *PermissionTemplateArgs, opts ...pulumi.ResourceOption) (*PermissionTemplate, error) {
	if args == nil {
		args = &PermissionTemplateArgs{}
	}

	var resource PermissionTemplate
	err := ctx.RegisterResource("sonarqube:index/permissionTemplate:PermissionTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermissionTemplate gets an existing PermissionTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermissionTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionTemplateState, opts ...pulumi.ResourceOption) (*PermissionTemplate, error) {
	var resource PermissionTemplate
	err := ctx.ReadResource("sonarqube:index/permissionTemplate:PermissionTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PermissionTemplate resources.
type permissionTemplateState struct {
	Description       *string `pulumi:"description"`
	Name              *string `pulumi:"name"`
	ProjectKeyPattern *string `pulumi:"projectKeyPattern"`
}

type PermissionTemplateState struct {
	Description       pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	ProjectKeyPattern pulumi.StringPtrInput
}

func (PermissionTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionTemplateState)(nil)).Elem()
}

type permissionTemplateArgs struct {
	Description       *string `pulumi:"description"`
	Name              *string `pulumi:"name"`
	ProjectKeyPattern *string `pulumi:"projectKeyPattern"`
}

// The set of arguments for constructing a PermissionTemplate resource.
type PermissionTemplateArgs struct {
	Description       pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	ProjectKeyPattern pulumi.StringPtrInput
}

func (PermissionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionTemplateArgs)(nil)).Elem()
}

type PermissionTemplateInput interface {
	pulumi.Input

	ToPermissionTemplateOutput() PermissionTemplateOutput
	ToPermissionTemplateOutputWithContext(ctx context.Context) PermissionTemplateOutput
}

func (*PermissionTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTemplate)(nil)).Elem()
}

func (i *PermissionTemplate) ToPermissionTemplateOutput() PermissionTemplateOutput {
	return i.ToPermissionTemplateOutputWithContext(context.Background())
}

func (i *PermissionTemplate) ToPermissionTemplateOutputWithContext(ctx context.Context) PermissionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTemplateOutput)
}

// PermissionTemplateArrayInput is an input type that accepts PermissionTemplateArray and PermissionTemplateArrayOutput values.
// You can construct a concrete instance of `PermissionTemplateArrayInput` via:
//
//          PermissionTemplateArray{ PermissionTemplateArgs{...} }
type PermissionTemplateArrayInput interface {
	pulumi.Input

	ToPermissionTemplateArrayOutput() PermissionTemplateArrayOutput
	ToPermissionTemplateArrayOutputWithContext(context.Context) PermissionTemplateArrayOutput
}

type PermissionTemplateArray []PermissionTemplateInput

func (PermissionTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PermissionTemplate)(nil)).Elem()
}

func (i PermissionTemplateArray) ToPermissionTemplateArrayOutput() PermissionTemplateArrayOutput {
	return i.ToPermissionTemplateArrayOutputWithContext(context.Background())
}

func (i PermissionTemplateArray) ToPermissionTemplateArrayOutputWithContext(ctx context.Context) PermissionTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTemplateArrayOutput)
}

// PermissionTemplateMapInput is an input type that accepts PermissionTemplateMap and PermissionTemplateMapOutput values.
// You can construct a concrete instance of `PermissionTemplateMapInput` via:
//
//          PermissionTemplateMap{ "key": PermissionTemplateArgs{...} }
type PermissionTemplateMapInput interface {
	pulumi.Input

	ToPermissionTemplateMapOutput() PermissionTemplateMapOutput
	ToPermissionTemplateMapOutputWithContext(context.Context) PermissionTemplateMapOutput
}

type PermissionTemplateMap map[string]PermissionTemplateInput

func (PermissionTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PermissionTemplate)(nil)).Elem()
}

func (i PermissionTemplateMap) ToPermissionTemplateMapOutput() PermissionTemplateMapOutput {
	return i.ToPermissionTemplateMapOutputWithContext(context.Background())
}

func (i PermissionTemplateMap) ToPermissionTemplateMapOutputWithContext(ctx context.Context) PermissionTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTemplateMapOutput)
}

type PermissionTemplateOutput struct{ *pulumi.OutputState }

func (PermissionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTemplate)(nil)).Elem()
}

func (o PermissionTemplateOutput) ToPermissionTemplateOutput() PermissionTemplateOutput {
	return o
}

func (o PermissionTemplateOutput) ToPermissionTemplateOutputWithContext(ctx context.Context) PermissionTemplateOutput {
	return o
}

type PermissionTemplateArrayOutput struct{ *pulumi.OutputState }

func (PermissionTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PermissionTemplate)(nil)).Elem()
}

func (o PermissionTemplateArrayOutput) ToPermissionTemplateArrayOutput() PermissionTemplateArrayOutput {
	return o
}

func (o PermissionTemplateArrayOutput) ToPermissionTemplateArrayOutputWithContext(ctx context.Context) PermissionTemplateArrayOutput {
	return o
}

func (o PermissionTemplateArrayOutput) Index(i pulumi.IntInput) PermissionTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PermissionTemplate {
		return vs[0].([]*PermissionTemplate)[vs[1].(int)]
	}).(PermissionTemplateOutput)
}

type PermissionTemplateMapOutput struct{ *pulumi.OutputState }

func (PermissionTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PermissionTemplate)(nil)).Elem()
}

func (o PermissionTemplateMapOutput) ToPermissionTemplateMapOutput() PermissionTemplateMapOutput {
	return o
}

func (o PermissionTemplateMapOutput) ToPermissionTemplateMapOutputWithContext(ctx context.Context) PermissionTemplateMapOutput {
	return o
}

func (o PermissionTemplateMapOutput) MapIndex(k pulumi.StringInput) PermissionTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PermissionTemplate {
		return vs[0].(map[string]*PermissionTemplate)[vs[1].(string)]
	}).(PermissionTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTemplateInput)(nil)).Elem(), &PermissionTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTemplateArrayInput)(nil)).Elem(), PermissionTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTemplateMapInput)(nil)).Elem(), PermissionTemplateMap{})
	pulumi.RegisterOutputType(PermissionTemplateOutput{})
	pulumi.RegisterOutputType(PermissionTemplateArrayOutput{})
	pulumi.RegisterOutputType(PermissionTemplateMapOutput{})
}
