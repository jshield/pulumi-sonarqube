// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sonarqube

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type QualityGateCondition struct {
	pulumi.CustomResourceState

	Gateid    pulumi.StringPtrOutput `pulumi:"gateid"`
	Gatename  pulumi.StringPtrOutput `pulumi:"gatename"`
	Metric    pulumi.StringOutput    `pulumi:"metric"`
	Op        pulumi.StringOutput    `pulumi:"op"`
	Threshold pulumi.StringOutput    `pulumi:"threshold"`
}

// NewQualityGateCondition registers a new resource with the given unique name, arguments, and options.
func NewQualityGateCondition(ctx *pulumi.Context,
	name string, args *QualityGateConditionArgs, opts ...pulumi.ResourceOption) (*QualityGateCondition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	if args.Op == nil {
		return nil, errors.New("invalid value for required argument 'Op'")
	}
	if args.Threshold == nil {
		return nil, errors.New("invalid value for required argument 'Threshold'")
	}
	var resource QualityGateCondition
	err := ctx.RegisterResource("sonarqube:index/qualityGateCondition:QualityGateCondition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQualityGateCondition gets an existing QualityGateCondition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQualityGateCondition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QualityGateConditionState, opts ...pulumi.ResourceOption) (*QualityGateCondition, error) {
	var resource QualityGateCondition
	err := ctx.ReadResource("sonarqube:index/qualityGateCondition:QualityGateCondition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QualityGateCondition resources.
type qualityGateConditionState struct {
	Gateid    *string `pulumi:"gateid"`
	Gatename  *string `pulumi:"gatename"`
	Metric    *string `pulumi:"metric"`
	Op        *string `pulumi:"op"`
	Threshold *string `pulumi:"threshold"`
}

type QualityGateConditionState struct {
	Gateid    pulumi.StringPtrInput
	Gatename  pulumi.StringPtrInput
	Metric    pulumi.StringPtrInput
	Op        pulumi.StringPtrInput
	Threshold pulumi.StringPtrInput
}

func (QualityGateConditionState) ElementType() reflect.Type {
	return reflect.TypeOf((*qualityGateConditionState)(nil)).Elem()
}

type qualityGateConditionArgs struct {
	Gateid    *string `pulumi:"gateid"`
	Gatename  *string `pulumi:"gatename"`
	Metric    string  `pulumi:"metric"`
	Op        string  `pulumi:"op"`
	Threshold string  `pulumi:"threshold"`
}

// The set of arguments for constructing a QualityGateCondition resource.
type QualityGateConditionArgs struct {
	Gateid    pulumi.StringPtrInput
	Gatename  pulumi.StringPtrInput
	Metric    pulumi.StringInput
	Op        pulumi.StringInput
	Threshold pulumi.StringInput
}

func (QualityGateConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*qualityGateConditionArgs)(nil)).Elem()
}

type QualityGateConditionInput interface {
	pulumi.Input

	ToQualityGateConditionOutput() QualityGateConditionOutput
	ToQualityGateConditionOutputWithContext(ctx context.Context) QualityGateConditionOutput
}

func (*QualityGateCondition) ElementType() reflect.Type {
	return reflect.TypeOf((**QualityGateCondition)(nil)).Elem()
}

func (i *QualityGateCondition) ToQualityGateConditionOutput() QualityGateConditionOutput {
	return i.ToQualityGateConditionOutputWithContext(context.Background())
}

func (i *QualityGateCondition) ToQualityGateConditionOutputWithContext(ctx context.Context) QualityGateConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QualityGateConditionOutput)
}

// QualityGateConditionArrayInput is an input type that accepts QualityGateConditionArray and QualityGateConditionArrayOutput values.
// You can construct a concrete instance of `QualityGateConditionArrayInput` via:
//
//          QualityGateConditionArray{ QualityGateConditionArgs{...} }
type QualityGateConditionArrayInput interface {
	pulumi.Input

	ToQualityGateConditionArrayOutput() QualityGateConditionArrayOutput
	ToQualityGateConditionArrayOutputWithContext(context.Context) QualityGateConditionArrayOutput
}

type QualityGateConditionArray []QualityGateConditionInput

func (QualityGateConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QualityGateCondition)(nil)).Elem()
}

func (i QualityGateConditionArray) ToQualityGateConditionArrayOutput() QualityGateConditionArrayOutput {
	return i.ToQualityGateConditionArrayOutputWithContext(context.Background())
}

func (i QualityGateConditionArray) ToQualityGateConditionArrayOutputWithContext(ctx context.Context) QualityGateConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QualityGateConditionArrayOutput)
}

// QualityGateConditionMapInput is an input type that accepts QualityGateConditionMap and QualityGateConditionMapOutput values.
// You can construct a concrete instance of `QualityGateConditionMapInput` via:
//
//          QualityGateConditionMap{ "key": QualityGateConditionArgs{...} }
type QualityGateConditionMapInput interface {
	pulumi.Input

	ToQualityGateConditionMapOutput() QualityGateConditionMapOutput
	ToQualityGateConditionMapOutputWithContext(context.Context) QualityGateConditionMapOutput
}

type QualityGateConditionMap map[string]QualityGateConditionInput

func (QualityGateConditionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QualityGateCondition)(nil)).Elem()
}

func (i QualityGateConditionMap) ToQualityGateConditionMapOutput() QualityGateConditionMapOutput {
	return i.ToQualityGateConditionMapOutputWithContext(context.Background())
}

func (i QualityGateConditionMap) ToQualityGateConditionMapOutputWithContext(ctx context.Context) QualityGateConditionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QualityGateConditionMapOutput)
}

type QualityGateConditionOutput struct{ *pulumi.OutputState }

func (QualityGateConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QualityGateCondition)(nil)).Elem()
}

func (o QualityGateConditionOutput) ToQualityGateConditionOutput() QualityGateConditionOutput {
	return o
}

func (o QualityGateConditionOutput) ToQualityGateConditionOutputWithContext(ctx context.Context) QualityGateConditionOutput {
	return o
}

type QualityGateConditionArrayOutput struct{ *pulumi.OutputState }

func (QualityGateConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QualityGateCondition)(nil)).Elem()
}

func (o QualityGateConditionArrayOutput) ToQualityGateConditionArrayOutput() QualityGateConditionArrayOutput {
	return o
}

func (o QualityGateConditionArrayOutput) ToQualityGateConditionArrayOutputWithContext(ctx context.Context) QualityGateConditionArrayOutput {
	return o
}

func (o QualityGateConditionArrayOutput) Index(i pulumi.IntInput) QualityGateConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QualityGateCondition {
		return vs[0].([]*QualityGateCondition)[vs[1].(int)]
	}).(QualityGateConditionOutput)
}

type QualityGateConditionMapOutput struct{ *pulumi.OutputState }

func (QualityGateConditionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QualityGateCondition)(nil)).Elem()
}

func (o QualityGateConditionMapOutput) ToQualityGateConditionMapOutput() QualityGateConditionMapOutput {
	return o
}

func (o QualityGateConditionMapOutput) ToQualityGateConditionMapOutputWithContext(ctx context.Context) QualityGateConditionMapOutput {
	return o
}

func (o QualityGateConditionMapOutput) MapIndex(k pulumi.StringInput) QualityGateConditionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QualityGateCondition {
		return vs[0].(map[string]*QualityGateCondition)[vs[1].(string)]
	}).(QualityGateConditionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QualityGateConditionInput)(nil)).Elem(), &QualityGateCondition{})
	pulumi.RegisterInputType(reflect.TypeOf((*QualityGateConditionArrayInput)(nil)).Elem(), QualityGateConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QualityGateConditionMapInput)(nil)).Elem(), QualityGateConditionMap{})
	pulumi.RegisterOutputType(QualityGateConditionOutput{})
	pulumi.RegisterOutputType(QualityGateConditionArrayOutput{})
	pulumi.RegisterOutputType(QualityGateConditionMapOutput{})
}
