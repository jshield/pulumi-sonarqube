// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./getProjects";
export * from "./getQualityProfiles";
export * from "./getRules";
export * from "./getUsers";
export * from "./group";
export * from "./permission";
export * from "./permissionTemplate";
export * from "./plugin";
export * from "./provider";
export * from "./qualityGate";
export * from "./qualityGateCondition";
export * from "./qualityGateProjectAssociation";
export * from "./qualityProfile";
export * from "./qualityProfileActivateRule";
export * from "./qualityProfileProjectAssociation";
export * from "./rule";
export * from "./setting";
export * from "./sonarProject";
export * from "./user";
export * from "./userToken";
export * from "./webHook";

// Export sub-modules:
import * as config from "./config";

export {
    config,
};

// Import resources to register:
import { Group } from "./group";
import { Permission } from "./permission";
import { PermissionTemplate } from "./permissionTemplate";
import { Plugin } from "./plugin";
import { QualityGate } from "./qualityGate";
import { QualityGateCondition } from "./qualityGateCondition";
import { QualityGateProjectAssociation } from "./qualityGateProjectAssociation";
import { QualityProfile } from "./qualityProfile";
import { QualityProfileActivateRule } from "./qualityProfileActivateRule";
import { QualityProfileProjectAssociation } from "./qualityProfileProjectAssociation";
import { Rule } from "./rule";
import { Setting } from "./setting";
import { SonarProject } from "./sonarProject";
import { User } from "./user";
import { UserToken } from "./userToken";
import { WebHook } from "./webHook";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sonarqube:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "sonarqube:index/permission:Permission":
                return new Permission(name, <any>undefined, { urn })
            case "sonarqube:index/permissionTemplate:PermissionTemplate":
                return new PermissionTemplate(name, <any>undefined, { urn })
            case "sonarqube:index/plugin:Plugin":
                return new Plugin(name, <any>undefined, { urn })
            case "sonarqube:index/qualityGate:QualityGate":
                return new QualityGate(name, <any>undefined, { urn })
            case "sonarqube:index/qualityGateCondition:QualityGateCondition":
                return new QualityGateCondition(name, <any>undefined, { urn })
            case "sonarqube:index/qualityGateProjectAssociation:QualityGateProjectAssociation":
                return new QualityGateProjectAssociation(name, <any>undefined, { urn })
            case "sonarqube:index/qualityProfile:QualityProfile":
                return new QualityProfile(name, <any>undefined, { urn })
            case "sonarqube:index/qualityProfileActivateRule:QualityProfileActivateRule":
                return new QualityProfileActivateRule(name, <any>undefined, { urn })
            case "sonarqube:index/qualityProfileProjectAssociation:QualityProfileProjectAssociation":
                return new QualityProfileProjectAssociation(name, <any>undefined, { urn })
            case "sonarqube:index/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            case "sonarqube:index/setting:Setting":
                return new Setting(name, <any>undefined, { urn })
            case "sonarqube:index/sonarProject:SonarProject":
                return new SonarProject(name, <any>undefined, { urn })
            case "sonarqube:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "sonarqube:index/userToken:UserToken":
                return new UserToken(name, <any>undefined, { urn })
            case "sonarqube:index/webHook:WebHook":
                return new WebHook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sonarqube", "index/group", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/permission", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/permissionTemplate", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/plugin", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/qualityGate", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/qualityGateCondition", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/qualityGateProjectAssociation", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/qualityProfile", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/qualityProfileActivateRule", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/qualityProfileProjectAssociation", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/rule", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/setting", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/sonarProject", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/user", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/userToken", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/webHook", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("sonarqube", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:sonarqube") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
