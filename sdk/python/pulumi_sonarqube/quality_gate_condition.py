# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['QualityGateConditionArgs', 'QualityGateCondition']

@pulumi.input_type
class QualityGateConditionArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 op: pulumi.Input[str],
                 threshold: pulumi.Input[str],
                 gateid: Optional[pulumi.Input[str]] = None,
                 gatename: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a QualityGateCondition resource.
        """
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "threshold", threshold)
        if gateid is not None:
            pulumi.set(__self__, "gateid", gateid)
        if gatename is not None:
            pulumi.set(__self__, "gatename", gatename)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def op(self) -> pulumi.Input[str]:
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: pulumi.Input[str]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[str]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[str]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def gateid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateid")

    @gateid.setter
    def gateid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateid", value)

    @property
    @pulumi.getter
    def gatename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gatename")

    @gatename.setter
    def gatename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gatename", value)


@pulumi.input_type
class _QualityGateConditionState:
    def __init__(__self__, *,
                 gateid: Optional[pulumi.Input[str]] = None,
                 gatename: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 op: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering QualityGateCondition resources.
        """
        if gateid is not None:
            pulumi.set(__self__, "gateid", gateid)
        if gatename is not None:
            pulumi.set(__self__, "gatename", gatename)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if op is not None:
            pulumi.set(__self__, "op", op)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def gateid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateid")

    @gateid.setter
    def gateid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateid", value)

    @property
    @pulumi.getter
    def gatename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gatename")

    @gatename.setter
    def gatename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gatename", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def op(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "threshold", value)


class QualityGateCondition(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 gateid: Optional[pulumi.Input[str]] = None,
                 gatename: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 op: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a QualityGateCondition resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: QualityGateConditionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a QualityGateCondition resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param QualityGateConditionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(QualityGateConditionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 gateid: Optional[pulumi.Input[str]] = None,
                 gatename: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 op: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = QualityGateConditionArgs.__new__(QualityGateConditionArgs)

            __props__.__dict__["gateid"] = gateid
            __props__.__dict__["gatename"] = gatename
            if metric is None and not opts.urn:
                raise TypeError("Missing required property 'metric'")
            __props__.__dict__["metric"] = metric
            if op is None and not opts.urn:
                raise TypeError("Missing required property 'op'")
            __props__.__dict__["op"] = op
            if threshold is None and not opts.urn:
                raise TypeError("Missing required property 'threshold'")
            __props__.__dict__["threshold"] = threshold
        super(QualityGateCondition, __self__).__init__(
            'sonarqube:index/qualityGateCondition:QualityGateCondition',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            gateid: Optional[pulumi.Input[str]] = None,
            gatename: Optional[pulumi.Input[str]] = None,
            metric: Optional[pulumi.Input[str]] = None,
            op: Optional[pulumi.Input[str]] = None,
            threshold: Optional[pulumi.Input[str]] = None) -> 'QualityGateCondition':
        """
        Get an existing QualityGateCondition resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _QualityGateConditionState.__new__(_QualityGateConditionState)

        __props__.__dict__["gateid"] = gateid
        __props__.__dict__["gatename"] = gatename
        __props__.__dict__["metric"] = metric
        __props__.__dict__["op"] = op
        __props__.__dict__["threshold"] = threshold
        return QualityGateCondition(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def gateid(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "gateid")

    @property
    @pulumi.getter
    def gatename(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "gatename")

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Output[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def op(self) -> pulumi.Output[str]:
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Output[str]:
        return pulumi.get(self, "threshold")

